/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.lab.events.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UploadCompleted extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4115928027842858246L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UploadCompleted\",\"namespace\":\"kafka.lab.events.v1\",\"fields\":[{\"name\":\"uploadId\",\"type\":\"string\"},{\"name\":\"fileStore\",\"type\":\"string\"},{\"name\":\"fileId\",\"type\":\"string\"},{\"name\":\"targetFileStore\",\"type\":\"string\"},{\"name\":\"targetFileId\",\"type\":\"string\"},{\"name\":\"fileName\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UploadCompleted> ENCODER =
      new BinaryMessageEncoder<UploadCompleted>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UploadCompleted> DECODER =
      new BinaryMessageDecoder<UploadCompleted>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UploadCompleted> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UploadCompleted> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UploadCompleted> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UploadCompleted>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UploadCompleted to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UploadCompleted from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UploadCompleted instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UploadCompleted fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence uploadId;
   private java.lang.CharSequence fileStore;
   private java.lang.CharSequence fileId;
   private java.lang.CharSequence targetFileStore;
   private java.lang.CharSequence targetFileId;
   private java.lang.CharSequence fileName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UploadCompleted() {}

  /**
   * All-args constructor.
   * @param uploadId The new value for uploadId
   * @param fileStore The new value for fileStore
   * @param fileId The new value for fileId
   * @param targetFileStore The new value for targetFileStore
   * @param targetFileId The new value for targetFileId
   * @param fileName The new value for fileName
   */
  public UploadCompleted(java.lang.CharSequence uploadId, java.lang.CharSequence fileStore, java.lang.CharSequence fileId, java.lang.CharSequence targetFileStore, java.lang.CharSequence targetFileId, java.lang.CharSequence fileName) {
    this.uploadId = uploadId;
    this.fileStore = fileStore;
    this.fileId = fileId;
    this.targetFileStore = targetFileStore;
    this.targetFileId = targetFileId;
    this.fileName = fileName;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uploadId;
    case 1: return fileStore;
    case 2: return fileId;
    case 3: return targetFileStore;
    case 4: return targetFileId;
    case 5: return fileName;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uploadId = (java.lang.CharSequence)value$; break;
    case 1: fileStore = (java.lang.CharSequence)value$; break;
    case 2: fileId = (java.lang.CharSequence)value$; break;
    case 3: targetFileStore = (java.lang.CharSequence)value$; break;
    case 4: targetFileId = (java.lang.CharSequence)value$; break;
    case 5: fileName = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uploadId' field.
   * @return The value of the 'uploadId' field.
   */
  public java.lang.CharSequence getUploadId() {
    return uploadId;
  }


  /**
   * Sets the value of the 'uploadId' field.
   * @param value the value to set.
   */
  public void setUploadId(java.lang.CharSequence value) {
    this.uploadId = value;
  }

  /**
   * Gets the value of the 'fileStore' field.
   * @return The value of the 'fileStore' field.
   */
  public java.lang.CharSequence getFileStore() {
    return fileStore;
  }


  /**
   * Sets the value of the 'fileStore' field.
   * @param value the value to set.
   */
  public void setFileStore(java.lang.CharSequence value) {
    this.fileStore = value;
  }

  /**
   * Gets the value of the 'fileId' field.
   * @return The value of the 'fileId' field.
   */
  public java.lang.CharSequence getFileId() {
    return fileId;
  }


  /**
   * Sets the value of the 'fileId' field.
   * @param value the value to set.
   */
  public void setFileId(java.lang.CharSequence value) {
    this.fileId = value;
  }

  /**
   * Gets the value of the 'targetFileStore' field.
   * @return The value of the 'targetFileStore' field.
   */
  public java.lang.CharSequence getTargetFileStore() {
    return targetFileStore;
  }


  /**
   * Sets the value of the 'targetFileStore' field.
   * @param value the value to set.
   */
  public void setTargetFileStore(java.lang.CharSequence value) {
    this.targetFileStore = value;
  }

  /**
   * Gets the value of the 'targetFileId' field.
   * @return The value of the 'targetFileId' field.
   */
  public java.lang.CharSequence getTargetFileId() {
    return targetFileId;
  }


  /**
   * Sets the value of the 'targetFileId' field.
   * @param value the value to set.
   */
  public void setTargetFileId(java.lang.CharSequence value) {
    this.targetFileId = value;
  }

  /**
   * Gets the value of the 'fileName' field.
   * @return The value of the 'fileName' field.
   */
  public java.lang.CharSequence getFileName() {
    return fileName;
  }


  /**
   * Sets the value of the 'fileName' field.
   * @param value the value to set.
   */
  public void setFileName(java.lang.CharSequence value) {
    this.fileName = value;
  }

  /**
   * Creates a new UploadCompleted RecordBuilder.
   * @return A new UploadCompleted RecordBuilder
   */
  public static kafka.lab.events.v1.UploadCompleted.Builder newBuilder() {
    return new kafka.lab.events.v1.UploadCompleted.Builder();
  }

  /**
   * Creates a new UploadCompleted RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UploadCompleted RecordBuilder
   */
  public static kafka.lab.events.v1.UploadCompleted.Builder newBuilder(kafka.lab.events.v1.UploadCompleted.Builder other) {
    if (other == null) {
      return new kafka.lab.events.v1.UploadCompleted.Builder();
    } else {
      return new kafka.lab.events.v1.UploadCompleted.Builder(other);
    }
  }

  /**
   * Creates a new UploadCompleted RecordBuilder by copying an existing UploadCompleted instance.
   * @param other The existing instance to copy.
   * @return A new UploadCompleted RecordBuilder
   */
  public static kafka.lab.events.v1.UploadCompleted.Builder newBuilder(kafka.lab.events.v1.UploadCompleted other) {
    if (other == null) {
      return new kafka.lab.events.v1.UploadCompleted.Builder();
    } else {
      return new kafka.lab.events.v1.UploadCompleted.Builder(other);
    }
  }

  /**
   * RecordBuilder for UploadCompleted instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UploadCompleted>
    implements org.apache.avro.data.RecordBuilder<UploadCompleted> {

    private java.lang.CharSequence uploadId;
    private java.lang.CharSequence fileStore;
    private java.lang.CharSequence fileId;
    private java.lang.CharSequence targetFileStore;
    private java.lang.CharSequence targetFileId;
    private java.lang.CharSequence fileName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.lab.events.v1.UploadCompleted.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uploadId)) {
        this.uploadId = data().deepCopy(fields()[0].schema(), other.uploadId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fileStore)) {
        this.fileStore = data().deepCopy(fields()[1].schema(), other.fileStore);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.fileId)) {
        this.fileId = data().deepCopy(fields()[2].schema(), other.fileId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.targetFileStore)) {
        this.targetFileStore = data().deepCopy(fields()[3].schema(), other.targetFileStore);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.targetFileId)) {
        this.targetFileId = data().deepCopy(fields()[4].schema(), other.targetFileId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.fileName)) {
        this.fileName = data().deepCopy(fields()[5].schema(), other.fileName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing UploadCompleted instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.lab.events.v1.UploadCompleted other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.uploadId)) {
        this.uploadId = data().deepCopy(fields()[0].schema(), other.uploadId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileStore)) {
        this.fileStore = data().deepCopy(fields()[1].schema(), other.fileStore);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fileId)) {
        this.fileId = data().deepCopy(fields()[2].schema(), other.fileId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.targetFileStore)) {
        this.targetFileStore = data().deepCopy(fields()[3].schema(), other.targetFileStore);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.targetFileId)) {
        this.targetFileId = data().deepCopy(fields()[4].schema(), other.targetFileId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.fileName)) {
        this.fileName = data().deepCopy(fields()[5].schema(), other.fileName);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'uploadId' field.
      * @return The value.
      */
    public java.lang.CharSequence getUploadId() {
      return uploadId;
    }


    /**
      * Sets the value of the 'uploadId' field.
      * @param value The value of 'uploadId'.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder setUploadId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uploadId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uploadId' field has been set.
      * @return True if the 'uploadId' field has been set, false otherwise.
      */
    public boolean hasUploadId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uploadId' field.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder clearUploadId() {
      uploadId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileStore' field.
      * @return The value.
      */
    public java.lang.CharSequence getFileStore() {
      return fileStore;
    }


    /**
      * Sets the value of the 'fileStore' field.
      * @param value The value of 'fileStore'.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder setFileStore(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fileStore = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fileStore' field has been set.
      * @return True if the 'fileStore' field has been set, false otherwise.
      */
    public boolean hasFileStore() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fileStore' field.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder clearFileStore() {
      fileStore = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileId' field.
      * @return The value.
      */
    public java.lang.CharSequence getFileId() {
      return fileId;
    }


    /**
      * Sets the value of the 'fileId' field.
      * @param value The value of 'fileId'.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder setFileId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.fileId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fileId' field has been set.
      * @return True if the 'fileId' field has been set, false otherwise.
      */
    public boolean hasFileId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fileId' field.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder clearFileId() {
      fileId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetFileStore' field.
      * @return The value.
      */
    public java.lang.CharSequence getTargetFileStore() {
      return targetFileStore;
    }


    /**
      * Sets the value of the 'targetFileStore' field.
      * @param value The value of 'targetFileStore'.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder setTargetFileStore(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.targetFileStore = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'targetFileStore' field has been set.
      * @return True if the 'targetFileStore' field has been set, false otherwise.
      */
    public boolean hasTargetFileStore() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'targetFileStore' field.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder clearTargetFileStore() {
      targetFileStore = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetFileId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTargetFileId() {
      return targetFileId;
    }


    /**
      * Sets the value of the 'targetFileId' field.
      * @param value The value of 'targetFileId'.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder setTargetFileId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.targetFileId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'targetFileId' field has been set.
      * @return True if the 'targetFileId' field has been set, false otherwise.
      */
    public boolean hasTargetFileId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'targetFileId' field.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder clearTargetFileId() {
      targetFileId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFileName() {
      return fileName;
    }


    /**
      * Sets the value of the 'fileName' field.
      * @param value The value of 'fileName'.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder setFileName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.fileName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'fileName' field has been set.
      * @return True if the 'fileName' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'fileName' field.
      * @return This builder.
      */
    public kafka.lab.events.v1.UploadCompleted.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UploadCompleted build() {
      try {
        UploadCompleted record = new UploadCompleted();
        record.uploadId = fieldSetFlags()[0] ? this.uploadId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fileStore = fieldSetFlags()[1] ? this.fileStore : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.fileId = fieldSetFlags()[2] ? this.fileId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.targetFileStore = fieldSetFlags()[3] ? this.targetFileStore : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.targetFileId = fieldSetFlags()[4] ? this.targetFileId : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.fileName = fieldSetFlags()[5] ? this.fileName : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UploadCompleted>
    WRITER$ = (org.apache.avro.io.DatumWriter<UploadCompleted>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UploadCompleted>
    READER$ = (org.apache.avro.io.DatumReader<UploadCompleted>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.uploadId);

    out.writeString(this.fileStore);

    out.writeString(this.fileId);

    out.writeString(this.targetFileStore);

    out.writeString(this.targetFileId);

    out.writeString(this.fileName);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.uploadId = in.readString(this.uploadId instanceof Utf8 ? (Utf8)this.uploadId : null);

      this.fileStore = in.readString(this.fileStore instanceof Utf8 ? (Utf8)this.fileStore : null);

      this.fileId = in.readString(this.fileId instanceof Utf8 ? (Utf8)this.fileId : null);

      this.targetFileStore = in.readString(this.targetFileStore instanceof Utf8 ? (Utf8)this.targetFileStore : null);

      this.targetFileId = in.readString(this.targetFileId instanceof Utf8 ? (Utf8)this.targetFileId : null);

      this.fileName = in.readString(this.fileName instanceof Utf8 ? (Utf8)this.fileName : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.uploadId = in.readString(this.uploadId instanceof Utf8 ? (Utf8)this.uploadId : null);
          break;

        case 1:
          this.fileStore = in.readString(this.fileStore instanceof Utf8 ? (Utf8)this.fileStore : null);
          break;

        case 2:
          this.fileId = in.readString(this.fileId instanceof Utf8 ? (Utf8)this.fileId : null);
          break;

        case 3:
          this.targetFileStore = in.readString(this.targetFileStore instanceof Utf8 ? (Utf8)this.targetFileStore : null);
          break;

        case 4:
          this.targetFileId = in.readString(this.targetFileId instanceof Utf8 ? (Utf8)this.targetFileId : null);
          break;

        case 5:
          this.fileName = in.readString(this.fileName instanceof Utf8 ? (Utf8)this.fileName : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










